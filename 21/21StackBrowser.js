//!! Первый способо
function calculateStackMemory() { //! Объявляем функцию
  const stackDummy = []; //! массив куда будем пушить элементы
  let stackSize = 0; //! 

  const measureStackSize = () => { //! объявляем рекурсивную функцию
    try {
      stackDummy.push({}); //! пушим пустой объект в массив 
      stackSize++; //! прибавляем к размеру сколько элементов вместилось
      measureStackSize(); //! рекурсивно вызываем
    } catch (error) {
      console.log(`Размер стека: примерно ${stackSize} элементов.`); //! отобразим сколько примерно максимальный размер стека погрешность 10-20 элементов
    }
  };

  measureStackSize(); //! вызываем функцию внутри функцию главного порядка чтобы запустить рекурсию
}

calculateStackMemory(); //! вызываем функцию для считывания размера стека

//!!Второй способ

let stackSize = 0; //! объяляем стек элементов

function recursiveFunction() { //! Объявляем функцию
  try {
    stackSize++; //! увеличиваем количество элементво в стеке
    recursiveFunction(); //! рекурсивно вызывем саму функцию для вычислений размера стека
  } catch (error) {
    console.log(`Максимальная глубина стека: ${stackSize}`); //! как только стек переполнится упадём сюда и отобразим максимальный размер стека при перезапусках погрешность может быть 10-20 элементов
  }
}

recursiveFunction(); //! вызовим функцию чтоб запустить рекурсию
